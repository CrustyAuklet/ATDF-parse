/**
 * Device: {{device_meta.name}}
 * Vendor: {{device_meta.vendor}}
 * Version: {{device_meta.version}}
 * Peripheral: {{peripheral.name}}
 * {{peripheral.description}}
 */
#pragma once

#include "register.hpp"
#include <cstdint>

{% macro make_valid_name(label, prefix) %}
{%- if label[0] in '0123456789' %}{{prefix}}{% endif %}{{label}}
{%- endmacro -%}

namespace sfr {
    using ucpp::registers::reg_t;
    using ucpp::registers::bitfield_t;
    using ucpp::registers::registerType;
    using ucpp::registers::addressType;

namespace {{peripheral.name}} {
{% for reg in peripheral.registers %}{% for f in reg._fields %}{% if f.is_enumerated_type %}
    // {{f.description}}
    enum class {{f.name}}v : uint{{reg._size}}_t {
{%- for value in f.enumerated_values %}
        {%- if value.value != None %}
        {{ make_valid_name(value.name, 'v') }} = {{ "0x%X"|format(value.value) }}, // {{value.description}}
        {%- else %}
        // {{value.name}} = {{value.description}}
        {%- endif %}
{%- endfor %}
    };
{% endif %}{% endfor %}{% endfor %}
}   // namespace {{peripheral.name}}

/// {{peripheral.description}}
template <addressType BASE_ADDRESS>
struct {{peripheral.name}}_t {
    static constexpr addressType BaseAddress = BASE_ADDRESS;
{%- for reg in peripheral.registers %}

    /**
     * {{reg.name}} - {{ (reg._size/8)|int }} bytes at offset {{ reg.address_offset }}
     * {{reg.description}}
     * Access: {{ reg._access }}
     * Protection: {{ reg._protection }}
     * Write side-effects: {{ reg._modified_write_values }}
     * Read side-effects: {{ reg._read_action }}
     */
    static constexpr struct {{reg.name}}_t : reg_t<uint{{reg._size}}_t, BASE_ADDRESS + {{"0x%0X"|format(reg.address_offset)}}{%if reg._access == 'read-only'%}, ucpp::registers::read_only{%endif%}> {
        using reg_t<uint{{reg._size}}_t, BASE_ADDRESS + {{"0x%0X"|format(reg.address_offset)}}>::operator=;
        static constexpr uint{{reg._size}}_t reset_mask  = {{"0x%0X"|format(reg._reset_mask)}};
        static constexpr uint{{reg._size}}_t reset_value = {{"0x%0X"|format(reg._reset_value)}};
{%- for field in reg._fields %}
{%- if field.bit_width == 1 %}{% set field_type = 'bool' %}
{%- elif field.is_enumerated_type %}{% set field_type = peripheral.name+'::'+field.name+'v' %}
{%- else %}{% set field_type = None %}
{%- endif %}
        static constexpr bitfield_t<{{reg.name}}_t, {{field.bit_offset + field.bit_width - 1}}, {{field.bit_offset}}{% if field_type %}, {{field_type}}{% endif %}> {{field.name}} = {};    //< {{field.description}}
{%- endfor %}
    } {{reg.name}} = {};

{%- endfor %}

} // namespace sfr
