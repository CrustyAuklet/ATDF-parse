/**
 * {{module.version}}-{{module.name}} (id {{module.id}})
 * {{module.description}}
 *
 *
 */
#pragma once

#include "device/register.hpp"
#include <boost/static_assert.hpp>
#include <cstdint>

namespace device {

{% for group in module.registerGroups -%}
/**
 * {{group.name}}
 * {{group.description}}
 * Size: {{group.size}} bytes
 */
template <addressType BASE_ADDRESS>
struct {{group.name}}_t {
    {%- for register in group.registers -%}
    {% if register.typename is defined %}{# Register instances have the variable typename #}
    /// {{register.description}}
    {{register.typename}}_t<BASE_ADDRESS + {{'0x%04X' % register.offset}}> {{register.name}};
    {% else %}
        {% set rs = register.size * 8 %}
    /// {{register.description}} - {{register.size}} bytes
    struct {{register.name}} : public reg{{rs}}_t<BASE_ADDRESS + {{'0x%04X' % register.offset}}> {
        {%- for field in register.fields %}
        typedef reg_field_t<BASE_ADDRESS + {{'0x%04X' % register.offset}}, {{'0x%02X' % field.mask}}, {{field.shift}}> {{field.name}};    //< {{field.description}} using {{field.valueType}}
        {%- endfor %}
    };
    {%- endif %}
    {%- endfor %}
};
{% endfor %}
namespace {{module.name}} {
{% for group in module.valueGroups %}
    // {{group.description}}
    class {{group.name}} {
    private:
        enum {{group.name}}_ {
{%- for value in group.values %}
            {{value.name}}_ = {{'0x%02X' % value.value}}, // {{value.description}}
{%- endfor %}
        };
        {{group.name}}_ value_;
    public:
        static const {{group.name}} {% for value in group.values %}{{value.name}}{% if not loop.last %}, {%else%};{%endif%}{% endfor %}
        explicit {{group.name}}(const {{group.name}}_& v) : value_(v) {}
        operator uint8_t() { return static_cast<uint8_t>(value_); }
    };
{% endfor %}
{% for group in module.interruptGroups %}
    // {{group.name}} Interrupts
    class INTERRUPTS {
    private:
        enum {{group.name}}_VECTORS_ {
{%- for interrupt in group.interrupts %}
            {{interrupt.name}}_ = {{interrupt.index}}, // {{interrupt.description}}
{%- endfor %}
        };
        {{group.name}}_VECTORS_ value_;
    public:
        static const {{group.name}} {% for interrupt in group.interrupts %}{{interrupt.name}}{% if not loop.last %}, {%else%};{%endif%}{% endfor %}
        explicit {{group.name}}(const {{group.name}}_VECTORS_& v) : value_(v) {}
        operator uint8_t() { return static_cast<uint8_t>(value_); }
    };
{% endfor %}
} // namespace {{module.name}}
} // namespace device
