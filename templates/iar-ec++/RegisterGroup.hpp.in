/**
 * {{module.version}}-{{module.name}} (id {{module.id}})
 * {{module.description}}
 *
 *
 */
#pragma once

#include "device/register.hpp"
#include <cstdint>

namespace device {

{% for group in module.registerGroups -%}
/**
 * {{group.name}}
 * {{group.description}}
 * Size: {{group.size}} bytes
 */
template <addressType BASE_ADDRESS>
struct {{group.name}}_t {
{%- for register in group.registers -%}
{% if register.typename is defined %}{# Register instances have the variable typename #}
    /// {{register.description}}
    {{register.typename}}_t<BASE_ADDRESS + {{'0x%04X' % register.offset}}> {{register.name}};
{% else %}
{% set rs = register.size * 8 %}
    /// {{register.description}} - {{register.size}} bytes
    struct {{register.name}} : public reg{{rs}}_t<BASE_ADDRESS + {{'0x%04X' % register.offset}}> {
{%- for field in register.fields %}
        typedef reg_field_t<BASE_ADDRESS + {{'0x%04X' % register.offset}}, {{'0x%02X' % field.mask}}, {{field.shift}}> {{field.name}};    //< {{field.description}} using {{field.valueType}}
{%- endfor %}
    };
{%- endif %}
{%- endfor %}
{%- if loop.last %}
{% for group in module.valueGroups %}
    // {{group.description}}
    class {{group.name}}v {
    public:
        enum {{group.name}}_ {
{%- for value in group.values %}
            {{value.name}} = {{'0x%02X' % value.value}}, // {{value.description}}
{%- endfor %}
        };
        {{group.name}}v(const {{group.name}}_& v) : value_(v) {}
        operator uint8_t() const { return value_; }
    private:
        uint8_t value_;
    };
{% endfor %}
{%- for group in module.interruptGroups %}
    // {{group.name}} ISR Vector Offsets (two bytes each)
    class INTERRUPTS {
    public:
        enum INTERRUPTS_ {
{%- for interrupt in group.interrupts %}
            {{interrupt.name}} = {{interrupt.index}}, // {{interrupt.description}}
{%- endfor %}
        };
        INTERRUPTS(const INTERRUPTS_& v) : value_(v) {}
        operator uint8_t() const { return value_; }
    private:
        uint8_t value_;
    };
{% endfor %}
{% endif -%}
};

{% endfor -%}
} // namespace device

