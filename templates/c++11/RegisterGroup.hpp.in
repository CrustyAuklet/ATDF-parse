/**
 * {{module.version}}-{{module.name}} (id {{module.id}})
 * {{module.description}}
 *
 *
 */
#pragma once

#include "register.hpp"
#include <cstdint>

namespace device {

{% for group in module.registerGroups -%}
/**
 * {{group.name}}
 * {{group.description}}
 * Size: {{group.size}} bytes
 */
template <addressType BASE_ADDRESS>
struct {{group.name}}_t {
{%- if loop.last %}
{% for group in module.valueGroups %}
    // {{group.description}}
    enum class {{group.name}}v : uint8_t {
{%- for value in group.values %}
        {{value.name}} = {{'0x%02X' % value.value}}, // {{value.description}}
{%- endfor %}
    };
{% endfor %}
{%- for group in module.interruptGroups %}
    // {{group.name}} ISR Vector Offsets (two bytes each)
    enum class INTERRUPTS {
{%- for interrupt in group.interrupts %}
        {{interrupt.name}} = {{interrupt.index}}, // {{interrupt.description}}
{%- endfor %}
    };
{%- endfor -%}
{%- endif -%}
{%- for register in group.registers -%}
{% if register.typename is defined %}{# Register instances have the variable typename #}
    /// {{register.description}}
    {{register.typename}}_t<BASE_ADDRESS + {{'0x%04X' % register.offset}}> {{register.name}};
{% else %}
{% set rs = register.size * 8 %}
    /// {{register.description}} - {{register.size}} bytes
    struct {{register.name}} : public reg{{rs}}_t<BASE_ADDRESS + {{'0x%04X' % register.offset}}> {
{%- for field in register.fields %}
        using {{field.name}} = reg_field_t<BASE_ADDRESS + {{'0x%04X' % register.offset}}, {{'0x%02X' % field.mask}}, {{field.shift}}{% if field.valueType %}, {{field.valueType}}v{% endif %}>;    //< {{field.description}}
{%- endfor %}
    };
{%- endif %}
{%- endfor %}
};

{% endfor -%}
} // namespace device

